@page "/heroes"

@using HeroesOfBlazor.Interfaces
@using HeroesOfBlazor.Entities
@using System.Linq.Dynamic.Core

@inject IHeroesService HeroesService
@inject NavigationManager Navigation
@inject NotificationService NotificationService

<h3>Heroes</h3>
<RadzenButton Text="Reset Grid" Click="@Reset" class="my-5"/>
<RadzenButton Text="Create Hero" Click="@CreateHero" class="my-5"/>
<RadzenDataGrid Count="@_count" Data="@_heroes" TItem="Hero"
                @ref="_grid" IsLoading="@_isLoading" LoadData="@LoadData"
                AllowFiltering="true" AllowColumnResize="false" AllowAlternatingRows="false"
                FilterMode="FilterMode.Advanced" AllowSorting="false" PageSize="5" AllowPaging="true"
                PagerHorizontalAlign="HorizontalAlign.Left" ShowPagingSummary="true">
    <LoadingTemplate>
        <div style="text-align: center; padding: 1rem;">
            <div class="spinner-border" role="status"></div>
        </div>
    </LoadingTemplate>
    <EmptyTemplate>
        <p style="color: lightgrey; font-size: 24px; text-align: center; margin: 2rem;">No heroes to display.</p>
    </EmptyTemplate>
    <Columns>
        <RadzenDataGridColumn TItem="Hero" Title="Id" HeaderCssClass="fw-bold" Property="Id" Width="100px"/>
        <RadzenDataGridColumn TItem="Hero" Title="Hero Name" HeaderCssClass="fw-bold" Property="HeroName"/>
        <RadzenDataGridColumn TItem="Hero" Title="First Name" HeaderCssClass="fw-bold" Property="FirstName"/>
        <RadzenDataGridColumn TItem="Hero" Title="Last Name" HeaderCssClass="fw-bold" Property="LastName"/>
        <RadzenDataGridColumn TItem="Hero" Title="City" HeaderCssClass="fw-bold" Property="City"/>
        <RadzenDataGridColumn TItem="Hero" Context="hero" Filterable="false" Sortable="false" 
                              TextAlign="TextAlign.Center" Frozen="true" FrozenPosition="FrozenColumnPosition.Right"
                              Width="150px">
            <Template Context="hero">
                <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" 
                              Size="ButtonSize.Medium" Click="@(args => EditHero(hero))" 
                              @onclick:stopPropagation="true">
                </RadzenButton>
                <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" 
                              Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" 
                              Click="@(args => DeleteHero(hero))"  @onclick:stopPropagation="true">
                </RadzenButton>
            </Template>
        </RadzenDataGridColumn>
    </Columns>
</RadzenDataGrid>

@code {
    private RadzenDataGrid<Hero> _grid = null!;
    private IEnumerable<Hero>? _heroes;
    private bool _isLoading = false;
    private int _count = 0;

    async Task LoadData(LoadDataArgs args)
    {
        _isLoading = true;
        await Task.Yield();
        var query = await HeroesService.GetHeroesQueryableAsync();
        
        if (!string.IsNullOrEmpty(args.Filter))
        {
            query = query.Where(args.Filter);
        }

        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            query = query.OrderBy(args.OrderBy);
        }

        _count = query.Count();
        _heroes = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();
        _isLoading = false;
    }

    private async Task Reset()
    {
        _grid.Reset(true);
        await _grid.FirstPage(true);
    }

    private void CreateHero()
    {
        Navigation.NavigateTo("/heroes/create");
    }

    private void EditHero(Hero hero)
    {
        Navigation.NavigateTo("/heroes/edit/" + hero.Id);
    }

    private async void DeleteHero(Hero hero)
    {
        NotificationService.Notify(NotificationSeverity.Info, "Deleting hero", "Please wait...");
        await HeroesService.DeleteHeroAsync(hero.Id);
        NotificationService.Notify(NotificationSeverity.Success, "Hero deleted", "Hero successfully deleted.");
        await Reset();
    }
}
