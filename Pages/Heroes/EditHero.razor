@page "/heroes/edit/{id}"

@using HeroesOfBlazor.Entities
@using HeroesOfBlazor.Interfaces
@using HeroesOfBlazor.Dto

@inject IHeroesService HeroService
@inject NotificationService NotificationService
@inject NavigationManager Navigation

<h3 class="mb-5">Edit Hero</h3>

<h4>Hero Details</h4>
<hr>

<div class="d-flex justify-content-center">
    <RadzenColumn Size="12" SizeMD="6" SizeLG="3">
        <RadzenTemplateForm TItem="UpdateHeroDto" Data="@_hero" Submit="@OnSubmit" InvalidSubmit="@OnInvalidSubmit">
            <RadzenFormField Text="First Name" Variant="Variant.Text" Style="width: 100%;" class="mb-5">
                <ChildContent>
                    <RadzenTextBox Name="FirstName" @bind-Value="@_hero.FirstName" Style="width: 100%;" Disabled="@_isLoading"/>
                </ChildContent>
                <Helper>
                    <RadzenRequiredValidator Component="FirstName" Text="First name is required"/>
                </Helper>
            </RadzenFormField>
            <RadzenFormField Text="Last Name" Variant="Variant.Text" Style="width: 100%;" class="mb-5">
                <ChildContent >
                    <RadzenTextBox Name="LastName" @bind-Value="@_hero.LastName" Style="width: 100%;" Disabled="@_isLoading"/>
                </ChildContent>
                <Helper>
                    <RadzenRequiredValidator Component="LastName" Text="Last name is required"/>
                </Helper>
            </RadzenFormField>
            <RadzenFormField Text="City of residence" Variant="Variant.Text" Style="width: 100%;" class="mb-5">
                <ChildContent >
                    <RadzenTextBox Name="City" @bind-Value="@_hero.City" Style="width: 100%;" Disabled="@_isLoading"/>
                </ChildContent>
                <Helper>
                    <RadzenRequiredValidator Component="City" Text="City is required"/>
                </Helper>
            </RadzenFormField>
            <RadzenButton ButtonType="ButtonType.Submit" Text="Update hero" class="rz-ml-auto"/>
        </RadzenTemplateForm>
    </RadzenColumn>
</div>

@code {

    [Parameter]
    public string Id { get; set; }

    private UpdateHeroDto _hero = new();
    private bool _isLoading;

    protected override async Task OnInitializedAsync()
    {
        _isLoading = true;
        NotificationService.Notify(NotificationSeverity.Info, "Loading", "Loading hero details...");
        try
        {
            int.TryParse(Id, out int heroId);
            _hero = await HeroService.GetHeroForUpdateAsync(heroId);
            Console.WriteLine(_hero.Id);
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            NotificationService.Notify(NotificationSeverity.Error, $"Error", e.Message);
        }
        finally
        {
            _isLoading = false;
            StateHasChanged();
            Console.WriteLine("Hero details loaded");
        }
    }

    async void OnSubmit(UpdateHeroDto hero)
    {
        NotificationService.Notify(NotificationSeverity.Info, "Updating", "Updating hero details...");
        await HeroService.UpdateHeroAsync(hero);
        NotificationService.Notify(NotificationSeverity.Success, "Success", "Hero details updated successfully");
        Navigation.NavigateTo("/heroes");
    }

    void OnInvalidSubmit()
    {
        NotificationService.Notify(NotificationSeverity.Error, "Error", "Input is invalid");
    }

}